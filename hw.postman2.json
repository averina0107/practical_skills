// Домашнее задание №5
// Тема:Postman
// Выполнила:
// студентка 26 группы
// Тютюнник В.С.
{
	"info": {
		"_postman_id": "f2f4777b-70d3-402d-af77-7dea1c1ef96e",
		"name": "HW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/get_method?name=str&age=str",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "str"
						},
						{
							"key": "age",
							"value": "str"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Valeriia\");\r",
							"});\r",
							"\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"28\");\r",
							"});\r",
							"\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"\r",
							"var reqBody = request.data;\r",
							"var salary = parseInt(reqBody.salary)\r",
							"\r",
							"pm.test(\"Your test name req\", function () {\r",
							"    pm.expect(reqBody.name).to.eql(jsonData.name)\r",
							"});\r",
							"\r",
							"pm.test(\"Your test age req\", function () {\r",
							"    pm.expect(reqBody.age).to.eql(jsonData.age)\r",
							"});\r",
							"\r",
							"pm.test(\"Your test salary req\", function () {\r",
							"    pm.expect(salary).to.eql(salary)\r",
							"});\r",
							"\r",
							"let resp_family = jsonData.family\r",
							"console.log(\"resp_family= \", resp_family)\r",
							"\r",
							" var req = request.data;\r",
							"pm.test(\"Your test salary*4\", function () {\r",
							"    \r",
							"    pm.expect(req.salary*4).to.eql(jsonData.family.u_salary_1_5_year);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Valeriia",
							"type": "string"
						},
						{
							"key": "age",
							"value": "28",
							"type": "string"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "string"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var reqBody = request.data;\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from req\", function() {\r",
							"    pm.expect(reqBody.name).to.eql(jsonData.name)\r",
							" });\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age from req\", function() {\r",
							"    pm.expect(reqBody.age).to.eql(jsonData.age)\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"//12. Проверить, что параметр age имеет значение 4."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_1?name=Valeriia&age=28&weight=56",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Valeriia"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "weight",
							"value": "56"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name=Valeriia&age=28&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Valeriia"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name with req\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name)\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age with req\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age)\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary with req\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(req.salary))\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(\"jsonData.family= \", jsonData.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test('The array have object', () => {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name')\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test('The array have object', () => {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age')\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test('The array have object', () => {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky')\r",
							"});\r",
							"pm.test('The array have object', () => {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.include('Luky')\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test('The array have object', () => {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4])\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Valeriia&age=28&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Valeriia"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var resp=pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name with req\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age with req\", function () {\r",
							"    pm.expect(resp.age).to.eql(parseInt(req.age))\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"req.salary =\", req.salary)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"resp.salary= \",resp.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"resp.salary[0]= \",resp.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"resp.salary[1]= \",resp.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"resp.salary[2]= \",resp.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary[0] with resp\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(parseInt(req.salary));\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary*2\", function () {\r",
							"    pm.expect(parseInt(resp.salary[1])).to.eql(req.salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary*3\", function () {\r",
							"    pm.expect(parseInt(resp.salary[2])).to.eql(req.salary*3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp.age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp.salary[0]);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i = 0; i <= resp.salary; i++) {\r",
							"  console.log(salary_cycle, resp.salary[i]);\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Valeriia&age=28&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Valeriia"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// //http://162.55.220.72:5005/user_info_2\r",
							"// //1. Вставить параметр salary из окружения в request\r",
							"// {{salary}}заменить в запросе Params значение столбца Value \r",
							"// //2. Вставить параметр age из окружения в age\r",
							"// {{age}}заменить в запросе Params значение столбца Value \r",
							"// //3. Вставить параметр name из окружения в name\r",
							"// {{name}} заменить в запросе Params значение столбца Value \r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var resp=pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"var req = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response start_qa_salary\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response person\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\")\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary with resp\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(parseInt(req.salary));\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months equals salary*2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months equals salary*2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year equals salary*3.3\", function() {\r",
							"\tpm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3); \r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years equals salary*3.8\", function() {\r",
							"\tpm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8); \r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person equals salary with req\", function() {\r",
							"\tpm.expect(resp.person.u_name[1]).to.eql(parseInt(req.salary)); \r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age equals age with req\", function() {\r",
							"\tpm.expect(resp.person.u_age).to.eql(parseInt(req.age)); \r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years equals salary*4.2\", function() {\r",
							"\tpm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2); \r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var  person_console= {\r",
							"    \"u_age\": 28,\r",
							"    \"u_name\": [\r",
							"        \"Valeriia\",\r",
							"        500,\r",
							"        28\r",
							"    ],\r",
							"    \"u_salary_5_years\": 2100.0\r",
							"};\r",
							"for (var person in person_console) {\r",
							"    console.log(person + '=' + person_console[person])\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "string"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "string"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "string"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"http://162.55.220.72:5005/first\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"status code 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"body matches string\", function() {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	]
}